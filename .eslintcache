[{"D:\\React\\to_do\\to_do\\src\\index.tsx":"1","D:\\React\\to_do\\to_do\\src\\AppWithRedux.tsx":"2","D:\\React\\to_do\\to_do\\src\\state\\store.tsx":"3","D:\\React\\to_do\\to_do\\src\\state\\todoListReducer.ts":"4","D:\\React\\to_do\\to_do\\src\\state\\taskReducer.ts":"5","D:\\React\\to_do\\to_do\\src\\components\\TodoList.tsx":"6","D:\\React\\to_do\\to_do\\src\\components\\AddItemForm.tsx":"7","D:\\React\\to_do\\to_do\\src\\components\\EditableValue.tsx":"8"},{"size":380,"mtime":1737197426939,"results":"9","hashOfConfig":"10"},{"size":1031,"mtime":1738505055541,"results":"11","hashOfConfig":"10"},{"size":429,"mtime":1738505936301,"results":"12","hashOfConfig":"10"},{"size":2617,"mtime":1738500106367,"results":"13","hashOfConfig":"10"},{"size":4678,"mtime":1738496230711,"results":"14","hashOfConfig":"10"},{"size":3507,"mtime":1738496230670,"results":"15","hashOfConfig":"10"},{"size":1353,"mtime":1738496230638,"results":"16","hashOfConfig":"10"},{"size":1388,"mtime":1738496230640,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vfcqpx",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\to_do\\to_do\\src\\index.tsx",[],"D:\\React\\to_do\\to_do\\src\\AppWithRedux.tsx",[],"D:\\React\\to_do\\to_do\\src\\state\\store.tsx",[],"D:\\React\\to_do\\to_do\\src\\state\\todoListReducer.ts",["38","39"],"// import {FilterType, TodoListType} from \"../AppWithReducer\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed';\r\nexport type TodoListType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterType\r\n}\r\n\r\nexport type ActionRemoveTodoListType = {\r\n    type:\"REMOVE_TODOLIST\";\r\n    id: string;\r\n}\r\nexport type ActionAddTodoListType = {\r\n    type:'ADD_TODOLIST';\r\n    title: string;\r\n    todoListId:string;\r\n}\r\nexport type ActionChangeFilterTodoList = {\r\n    type:'CHANGE_FILTER_TODOLIST';\r\n    id: string ;\r\n    filter: FilterType;\r\n}\r\nexport type ActionChangeTitleTodoList = {\r\n    type:'CHANGE_TITLE_TODOLIST';\r\n    id: string ;\r\n    title: string;\r\n}\r\n\r\ntype ActionType = ActionRemoveTodoListType\r\n    | ActionAddTodoListType\r\n    | ActionChangeTitleTodoList\r\n    | ActionChangeFilterTodoList;\r\n\r\nexport const todoList1 = v1()\r\nexport const todoList2 = v1()\r\nexport const todoList3 = v1()\r\nconst initialState:Array<TodoListType> = [\r\n    // {id: todoList1, title: 'Study', filter: 'all'},\r\n    // {id: todoList2, title: 'Book', filter: 'active'},\r\n    // {id: todoList3, title: 'Мои таски', filter: 'all'},\r\n]\r\nexport const todoListReducer = (state:Array<TodoListType> = initialState , action:ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST': {\r\n            return state.filter(list => list.id !== action.id)\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            return [{id: action.todoListId, title: action.title, filter: \"all\"}, ...state  ]\r\n        }\r\n        case 'CHANGE_FILTER_TODOLIST': {\r\n            return state.map( todolist => {\r\n               return todolist.id == action.id ? {...todolist, filter: action.filter} : todolist\r\n            })\r\n        }\r\n        case \"CHANGE_TITLE_TODOLIST\": {\r\n            return state.map( todolist => {\r\n                return todolist.id == action.id ? {...todolist, title: action.title} : todolist\r\n            })\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (idTodolist:string): ActionRemoveTodoListType => ({type: 'REMOVE_TODOLIST', id: idTodolist});\r\nexport const addTodoListAC = (title:string): ActionAddTodoListType => ({type:'ADD_TODOLIST', title: title, todoListId:v1()});\r\nexport const changeTitleTodoListAC = (title: string, idTodolist:string): ActionChangeTitleTodoList => ({type: 'CHANGE_TITLE_TODOLIST', id: idTodolist, title:title});\r\nexport const changeFilterTodoListAC = (idTodolist:string, filter:FilterType): ActionChangeFilterTodoList => ({type: 'CHANGE_FILTER_TODOLIST', id: idTodolist, filter:filter});","D:\\React\\to_do\\to_do\\src\\state\\taskReducer.ts",["40","41","42","43","44","45"],"import {v1} from \"uuid\";\r\nimport {ActionAddTodoListType, ActionRemoveTodoListType, todoList1, todoList2, todoList3} from \"./todoListReducer\";\r\nimport {TaskType} from \"../components/TodoList\";\r\n\r\nexport type TaskInTodoListType = {\r\n    [key:string]: Array<TaskType>\r\n}\r\n\r\ntype ActionAddTaskType = {\r\n    type: 'ADD_TASK';\r\n    todoListId: string;\r\n    title:string\r\n}\r\ntype ActionRemoveTaskType = {\r\n    type: 'REMOVE_TASK';\r\n    todoListId:string;\r\n    taskId:string\r\n}\r\ntype ActionToggleCheckboxTaskType = {\r\n    type: 'TOGGLE_CHECKBOX_TASK';\r\n    taskId:string;\r\n    todoListId:string;\r\n}\r\ntype ActionChangeTitleTaskType = {\r\n    type: 'CHANGE_TITLE_TASK';\r\n    title:string;\r\n    taskId:string;\r\n    todoListId:string;\r\n}\r\ntype ActionsType = ActionAddTaskType | ActionRemoveTaskType | ActionToggleCheckboxTaskType |\r\n    ActionChangeTitleTaskType | ActionAddTodoListType | ActionRemoveTodoListType;\r\n\r\nconst initialState = {\r\n    // [todoList1]: [\r\n    //     {id: v1(), title: 'HTML + CSS', isDone: true},\r\n    //     {id: v1(), title: 'JS', isDone: true},\r\n    //     {id: v1(), title: 'React', isDone: false},\r\n    //     {id: v1(), title: 'Typescript', isDone: false},\r\n    // ],\r\n    // [todoList2]: [\r\n    //     {id: v1(), title: 'Ученик', isDone: false},\r\n    //     {id: v1(), title: 'как закалялась сталь', isDone: false},\r\n    //     {id: v1(), title: 'Внутри убийцы', isDone: true},\r\n    // ],\r\n    // [todoList3]: [\r\n    //     {id: v1(), title: 'Вынести добавление тасок отдельно', isDone: true},\r\n    //     {id: v1(), title: 'Форма добавления todolist ', isDone: true},\r\n    //     {id: v1(), title: 'чтоб в инпуте был текс при даблклике', isDone: true},\r\n    //     {id: v1(), title: 'попробовать material UI', isDone: false},\r\n    //     {id: v1(), title: 'написать тесты и сделать reducer ', isDone: true},\r\n    //     {id: v1(), title: 'написать остальные функции вредусер ', isDone: true},\r\n    //     {id: v1(), title: 'добавить в удаление и добавление листа, чтобы удалял и там и там ', isDone: true},\r\n    //     {id: v1(), title: 'сделать state на usereducer ', isDone: false},\r\n    //     {id: v1(), title: 'сделать state на redux  ', isDone: false},\r\n    //     {id: v1(), title: 'докомпозировать app. вынестип лишнее внутрь  ', isDone: false},\r\n    // ]\r\n}\r\n\r\nexport const taskReducer = (state: TaskInTodoListType = initialState, action:ActionsType) => {\r\n    switch (action.type) {\r\n        case 'ADD_TASK' : {\r\n            const newTask = {id:v1(), title: action.title, isDone: false }\r\n            const newTodoList = [...state[action.todoListId], newTask]\r\n            return {...state, [action.todoListId]: newTodoList}\r\n        }\r\n        case 'REMOVE_TASK' : {\r\n            const newTodoList = state[action.todoListId].filter(task => task.id != action.taskId)\r\n            return {...state,[action.todoListId]: newTodoList }\r\n        }\r\n        case \"TOGGLE_CHECKBOX_TASK\": {\r\n            const newTodoList = state[action.todoListId].map(task => {\r\n                return task.id == action.taskId ? {...task, isDone: !task.isDone} : task\r\n            })\r\n            return {...state, [action.todoListId]: newTodoList }\r\n        }\r\n        case \"CHANGE_TITLE_TASK\": {\r\n            const newTodoList = state[action.todoListId].map(task => {\r\n                return task.id == action.taskId ? {...task, title: action.title} : task;\r\n            })\r\n            return {...state, [action.todoListId]: newTodoList }\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            return {[action.todoListId]: [], ...state}\r\n        }\r\n        case \"REMOVE_TODOLIST\": {\r\n            const newTasksInTodoList = {...state}\r\n            delete newTasksInTodoList[action.id]\r\n            return newTasksInTodoList\r\n        }\r\n        default : return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title:string, todoListId:string):ActionAddTaskType => ({\r\n    type:\"ADD_TASK\", title, todoListId\r\n})\r\nexport const removeTaskAC = (taskId:string, todoListId:string):ActionRemoveTaskType => ({\r\n    type:\"REMOVE_TASK\", taskId, todoListId\r\n})\r\nexport const toggleCheckboxTaskAC = (taskId:string, todoListId: string):ActionToggleCheckboxTaskType => ({\r\n    type:\"TOGGLE_CHECKBOX_TASK\", taskId, todoListId\r\n})\r\nexport const changeTitleTaskAC = (title:string, todoListId:string, taskId:string): ActionChangeTitleTaskType => ({\r\n    type:\"CHANGE_TITLE_TASK\", title, taskId, todoListId\r\n})","D:\\React\\to_do\\to_do\\src\\components\\TodoList.tsx",["46","47","48","49"],"import React from 'react';\r\nimport './../App.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableValue from \"./EditableValue\";\r\nimport {\r\n    addTaskAC,\r\n    changeTitleTaskAC,\r\n    removeTaskAC,\r\n    TaskInTodoListType,\r\n    toggleCheckboxTaskAC\r\n} from \"../state/taskReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeFilterTodoListAC, changeTitleTodoListAC, FilterType, removeTodoListAC} from \"../state/todoListReducer\";\r\nimport {AppRootType} from \"../state/store\";\r\n\r\nexport type TaskType = {\r\n    id:string;\r\n    title:string;\r\n    isDone:boolean;\r\n}\r\n\r\ntype PropsType = {\r\n    title:string;\r\n    id:string;\r\n    filter:FilterType;\r\n}\r\n\r\nconst TodoList = (props:PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const tasksInTodoList = useSelector<AppRootType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    let taskToDisplay = tasksInTodoList;\r\n    if (props.filter === 'active') {\r\n        taskToDisplay = tasksInTodoList.filter(task => !task.isDone)\r\n    } else if (props.filter === 'completed') {\r\n        taskToDisplay = tasksInTodoList.filter(task => task.isDone)\r\n    }\r\n\r\n    const onChangeFilterHandler = (filter:FilterType) => {\r\n        dispatch(changeFilterTodoListAC(props.id, filter))\r\n    }\r\n\r\n    const onClickRemoveTodoList = () => {\r\n        dispatch(removeTodoListAC(props.id))\r\n    }\r\n    const changeTodoListTitle = (newValue:string) => {\r\n        dispatch(changeTitleTodoListAC(newValue, props.id))\r\n    }\r\n    const changeTask = (newValue:string, idTask:string) => {\r\n        dispatch(changeTitleTaskAC(newValue, props.id, idTask))\r\n    }\r\n    return (\r\n        <section>\r\n            <div className=\"title\">\r\n                <h3><EditableValue text={props.title} changeTask={changeTodoListTitle} id={props.id}/></h3>\r\n                <button onClick={onClickRemoveTodoList}>x</button>\r\n            </div>\r\n            <AddItemForm addItem={(title:string) => {\r\n                dispatch(addTaskAC(title, props.id))\r\n            }}/>\r\n            <div className=\"tasks\">\r\n                <ul className='item_list'>\r\n                    {taskToDisplay.map(task => {\r\n                        const removeCurrentTask = () => {\r\n                            dispatch(removeTaskAC(task.id, props.id))\r\n                        }\r\n                        const onHandleTask = () => {\r\n                            dispatch(toggleCheckboxTaskAC(task.id, props.id))\r\n                        }\r\n                        return <li key={task.id}  className={task.isDone ? 'complete_task' : ''}>\r\n                            <input type=\"checkbox\" onChange={onHandleTask} checked={task.isDone}/>\r\n                            <EditableValue text={task.title} changeTask={changeTask} id={task.id}/>\r\n                            <button onClick={removeCurrentTask}>x</button>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button className={props.filter == 'all' ? 'active_button' : ''} onClick={() => onChangeFilterHandler('all')}>All</button>\r\n                <button className={props.filter == 'active' ? 'active_button' : ''} onClick={() => onChangeFilterHandler('active')}>Active</button>\r\n                <button className={props.filter == 'completed' ? 'active_button' : ''} onClick={() => onChangeFilterHandler('completed')}>Completed</button>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default TodoList;","D:\\React\\to_do\\to_do\\src\\components\\AddItemForm.tsx",["50","51"],"import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTodoListAC} from \"../state/todoListReducer\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title:string) => void;\r\n}\r\n\r\nexport const AddItemForm = (props:AddItemFormType) => {\r\n    const [valueInput, setValueInput] = useState('')\r\n    const [errorTextInput, setErrorTextInput] = useState(false)\r\n\r\n    const newValueChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValueInput(e.currentTarget.value)\r\n        setErrorTextInput(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.addItem(valueInput)\r\n            setValueInput('')\r\n        }\r\n    }\r\n    const addNewTask = () => {\r\n        if (valueInput) {\r\n            props.addItem(valueInput)\r\n            setValueInput('')\r\n        } else {\r\n            setErrorTextInput(true)\r\n        }\r\n    }\r\n    return <div>\r\n        <input value={valueInput}\r\n               onChange={newValueChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n               className={errorTextInput ? 'error_input' : ''}\r\n        />\r\n        <button onClick={addNewTask}>+</button>\r\n        {errorTextInput && <div className='error'>Поле ввода пустое</div>}\r\n    </div>\r\n}","D:\\React\\to_do\\to_do\\src\\components\\EditableValue.tsx",[],{"ruleId":"52","severity":1,"message":"53","line":54,"column":35,"nodeType":"54","messageId":"55","endLine":54,"endColumn":37},{"ruleId":"52","severity":1,"message":"53","line":59,"column":36,"nodeType":"54","messageId":"55","endLine":59,"endColumn":38},{"ruleId":"56","severity":1,"message":"57","line":2,"column":58,"nodeType":"58","messageId":"59","endLine":2,"endColumn":67},{"ruleId":"56","severity":1,"message":"60","line":2,"column":69,"nodeType":"58","messageId":"59","endLine":2,"endColumn":78},{"ruleId":"56","severity":1,"message":"61","line":2,"column":80,"nodeType":"58","messageId":"59","endLine":2,"endColumn":89},{"ruleId":"52","severity":1,"message":"62","line":67,"column":81,"nodeType":"54","messageId":"55","endLine":67,"endColumn":83},{"ruleId":"52","severity":1,"message":"53","line":72,"column":32,"nodeType":"54","messageId":"55","endLine":72,"endColumn":34},{"ruleId":"52","severity":1,"message":"53","line":78,"column":32,"nodeType":"54","messageId":"55","endLine":78,"endColumn":34},{"ruleId":"56","severity":1,"message":"63","line":9,"column":5,"nodeType":"58","messageId":"59","endLine":9,"endColumn":23},{"ruleId":"52","severity":1,"message":"53","line":79,"column":49,"nodeType":"54","messageId":"55","endLine":79,"endColumn":51},{"ruleId":"52","severity":1,"message":"53","line":80,"column":49,"nodeType":"54","messageId":"55","endLine":80,"endColumn":51},{"ruleId":"52","severity":1,"message":"53","line":81,"column":49,"nodeType":"54","messageId":"55","endLine":81,"endColumn":51},{"ruleId":"56","severity":1,"message":"64","line":2,"column":9,"nodeType":"58","messageId":"59","endLine":2,"endColumn":20},{"ruleId":"56","severity":1,"message":"65","line":3,"column":9,"nodeType":"58","messageId":"59","endLine":3,"endColumn":22},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'todoList1' is defined but never used.","Identifier","unusedVar","'todoList2' is defined but never used.","'todoList3' is defined but never used.","Expected '!==' and instead saw '!='.","'TaskInTodoListType' is defined but never used.","'useDispatch' is defined but never used.","'addTodoListAC' is defined but never used."]